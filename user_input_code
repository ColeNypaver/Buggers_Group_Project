#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

#initialize
library(shiny)
library(ggplot2)
library(purrr)
library(dplyr)


# UI for app
ui<-(pageWithSidebar(
    # title
    headerPanel("Select Options"),
    
    #input
    sidebarPanel
    (
        # Input: Select a file ----
        
        fileInput("file1", "Choose CSV File",
                  multiple = TRUE,
                  accept = c("text/csv",
                             "text/comma-separated-values,text/plain",
                             ".csv")),
        # Input: Checkbox if file has header ----
        checkboxInput("header", "Header", TRUE),
        
        # Input: Select separator ----
        radioButtons("sep", "Separator",
                     choices = c(Semicolon = ";",
                                 Comma = ",",
                                 Tab = "\t"),
                     selected = ","),
        # Horizontal line ----
        tags$hr(),
        
        
        # Input: Select what to display
        selectInput("dataset","Data:",
                    choices =list(iris = "iris", mtcars = "mtcars",
                                  uploaded_file = "inFile"), selected=NULL),
        selectInput("variable_1","Variable 1:", choices = NULL),
        selectInput("variable_2","Variable 2:", choices = NULL),
    ),
    
    # output
    mainPanel(
     
    )
))


# shiny server side code for each call
server<-(function(input, output, session){
    
    #update group and
    #variables based on the data
    observe({
        #browser()
        if(!exists(input$dataset)) return() #make sure upload exists
        var.opts<-colnames(get(input$dataset))
        updateSelectInput(session, "variable_1", choices = var.opts)
        updateSelectInput(session, "variable_2", choices = var.opts)
    })
    
    
    output$plot <- renderUI({
        plotOutput("p")
    })
    
    
    
    
    # set uploaded file
    upload_data<-reactive({
        
        inFile <- input$file1
        
        if (is.null(inFile))
            return(NULL)
        
        #could also store in a reactiveValues
        read.csv(inFile$datapath,
                 header = input$header,
                 sep = input$sep)
    })
    
    observeEvent(input$file1,{
        inFile<<-upload_data()
    })
    
    
})


# Create Shiny app ----
shinyApp(ui, server)
